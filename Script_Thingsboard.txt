
var encodedString = msg.array; // Obtener la trama en base64

// Caracteres de base64
var base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";


var base64Index = {}; // Se define el índice de base64 del mensaje entrante

// Se asigna valores a los caracteres de base64
for (var i = 0; i < base64Chars.length; i++) {
  base64Index[base64Chars.charAt(i)] = i;
}


var decodedString = ""; // Se define la cadena de texto para el decodificador
var i = 0; // Se define variable para el número de caracteres

// Se extrae caracteres de la cadena de texto codificada
while (i < encodedString.length) {

// Se almacena los caracteres en la posición especifica
  var char1 = base64Index[encodedString.charAt(i++)];
  var char2 = base64Index[encodedString.charAt(i++)];
  var char3 = base64Index[encodedString.charAt(i++)];
  var char4 = base64Index[encodedString.charAt(i++)];

// Se combina los valores de los 4 caracteres en bloques
  var byte1 = (char1 << 2) | (char2 >> 4);
  var byte2 = ((char2 & 15) << 4) | (char3 >> 2);
  var byte3 = ((char3 & 3) << 6) | char4;

// Se agrega los caracteres decodificados a la cadena de salida
  decodedString += String.fromCharCode(byte1);
  if (char3 != 64) {
    decodedString += String.fromCharCode(byte2);
  }
  if (char4 != 64) {
    decodedString += String.fromCharCode(byte3);
  }
}

// se define la instancia para almacenar los bytes decodificados
var result = new Uint8Array(decodedString.length); 

var frame = decodedString.length; // Se extrae la longitud de los bytes decodificados
var bit_frame = {}; // Se define el índice para la salida del decodificador

// Se define las variables para los datos decodificados
var ts = [],longitude = [], latitude = [], altimeter = [], voltage = [], current = [], rpm= [], speed  = [],power = [] ; 

// Se almacena los bytes en la matriz
for (var i=0; i<frame ; i++){
    result[i] = decodedString.charCodeAt(i);
}


var cont = 0; // Se define la variable para las 7 tramas que se reciben
var dv = new DataView(result.buffer); // Se lee los datos de la matriz

// Se obtiene los Bytes de cada una de las variables
for (var i=0; i<decodedString.length; i+=21){
    ts = ((dv.getUint32(0+i,true)+18000)*1000);
    longitude = dv.getInt32(4+i,true)/10000000;
    latitude =dv.getInt32(8+i,true)/10000000;
    altimeter = dv.getUint16(18+i,true);
    if (longitude == 0){
        longitude = ' ';
    
    }
    if (latitude == 0){
        latitude = ' ';
        altimeter = ' ';
    }
    voltage = dv.getUint16(12+i,true)/100;
    current = dv.getInt16(14+i,true)/1000;
    speed = dv.getUint16(16+i,true)/100;
    rpm = dv.getUint8(20+i,true);
    power = voltage * current;

    // Se almacena los datos en formato Json
    var bit_frame1 = {ts : ts, longitude : longitude, latitude:latitude,  voltage:voltage, current:current, speed:speed , altimeter:altimeter, rpm:rpm, power:power};
 
    // Se almacena los mensajes Json para las 7 tramas del mensaje
    bit_frame["bit_frame1"+cont] = bit_frame1;
    cont++;
    
}

// Retorna el array de las variables
return [
        {msg:bit_frame.bit_frame10, metadata: bit_frame.bit_frame10, msgType: msgType},
        {msg:bit_frame.bit_frame11,metadata: bit_frame.bit_frame11, msgType: msgType},
        {msg:bit_frame.bit_frame12,metadata: bit_frame.bit_frame12, msgType: msgType},
        {msg:bit_frame.bit_frame13,metadata: bit_frame.bit_frame13, msgType: msgType},
        {msg:bit_frame.bit_frame14,metadata: bit_frame.bit_frame14, msgType: msgType},
        {msg:bit_frame.bit_frame15,metadata: bit_frame.bit_frame15, msgType: msgType},
        {msg:bit_frame.bit_frame16,metadata: bit_frame.bit_frame16, msgType: msgType}
];